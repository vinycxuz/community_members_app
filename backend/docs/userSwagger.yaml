openapi: 3.0.0
info:
  title: User API
  description: API for managing users
  version: 1.0.0
paths:
  /register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Bad request
  /login:
    post:
      summary: Login a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email
                  example: user@example.com
                password:
                  type: string
                  description: User's password
                  example: password123
      responses:
        '200':
          description: User logged in successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  /profile:
    get:
      summary: Get user profile
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
        '401':
          description: Unauthorized
  /follow/{followId}:
    put:
      summary: Follow a user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: followId
          schema:
            type: string
          required: true
          description: ID of the user to follow
      responses:
        '200':
          description: User followed successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: User not found
  /unfollow/{unfollowId}:
    put:
      summary: Unfollow a user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: unfollowId
          schema:
            type: string
          required: true
          description: ID of the user to unfollow
      responses:
        '200':
          description: User unfollowed successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: User not found
components:
  schemas:
    User:
      type: object
      required:
        - username
        - email
        - password
      properties:
        id:
          type: string
          description: The auto-generated id of the user
        username:
          type: string
          description: Username of the user
        profilePicture:
          type: object
          description: Profile picture of the user
        email:
          type: string
          description: Email of the user
        password:
          type: string
          description: Password of the user
        googleId:
          type: string
          description: Google ID of the user
        authMethod:
          type: string
          enum: ['local', 'google', 'facebook', 'github']
          description: Authentication method
        posts:
          type: array
          items:
            type: string
          description: List of post IDs created by the user
        totalEarnings:
          type: number
          description: Total earnings of the user
        nextEarningDate:
          type: string
          format: date-time
          description: The next earning date for the user
        plan:
          type: string
          description: ID of the user's subscription plan
        isEmailVerified:
          type: boolean
          description: Whether the user's email is verified
        payments:
          type: array
          items:
            type: string
          description: List of payment IDs made by the user
        hasSelectedPlan:
          type: boolean
          description: Whether the user has selected a plan
        lastLogin:
          type: string
          format: date-time
          description: The date the user last logged in
        followers:
          type: array
          items:
            type: string
          description: List of user IDs who follow the user
        following:
          type: array
          items:
            type: string
          description: List of user IDs the user is following
        createdAt:
          type: string
          format: date-time
          description: The date the user was created
        updatedAt:
          type: string
          format: date-time
          description: The date the user was last updated
      example:
        id: 60d0fe4f5311236168a109cd
        username: sampleuser
        profilePicture: { url: "http://example.com/profile.jpg", public_id: "sample_profile" }
        email: user@example.com
        password: password123
        googleId: 1234567890
        authMethod: local
        posts: [60d0fe4f5311236168a109cc]
        totalEarnings: 500
        nextEarningDate: 2021-07-01T00:00:00.000Z
        plan: 60d0fe4f5311236168a109cb
        isEmailVerified: true
        payments: [60d0fe4f5311236168a109ca]
        hasSelectedPlan: true
        lastLogin: 2021-06-21T12:34:56.789Z
        followers: [60d0fe4f5311236168a109ca]
        following: [60d0fe4f5311236168a109ca]
        createdAt: 2021-06-21T12:34:56.789Z
        updatedAt: 2021-06-21T12:34:56.789Z
